# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

name: Build conda package
on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.CONFIG }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - CONFIG: linux_64_c_compiler_version10cuda_compilernvcccuda_compiler_version11.1cxx_compiler_version10
            SHORT_CONFIG: linux_64_c_compiler_version10cuda_c_h986d0e7918
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.1
            os: ubuntu
          - CONFIG: linux_64_c_compiler_version10cuda_compilernvcccuda_compiler_version11.2cxx_compiler_version10
            SHORT_CONFIG: linux_64_c_compiler_version10cuda_c_h6c3dbf9b3c
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.2
            os: ubuntu
          - CONFIG: linux_64_c_compiler_version12cuda_compilerNonecuda_compiler_versionNonecxx_compiler_version12
            SHORT_CONFIG: linux_64_c_compiler_version12cuda_c_hb71ef6ee82
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
            os: ubuntu
          - CONFIG: linux_64_c_compiler_version12cuda_compilercuda-nvcccuda_compiler_version12.0cxx_compiler_version12
            SHORT_CONFIG: linux_64_c_compiler_version12cuda_c_h0d07a5e0ab
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
            os: ubuntu
          - CONFIG: linux_64_c_compiler_version9cuda_compilernvcccuda_compiler_version11.0cxx_compiler_version9
            SHORT_CONFIG: linux_64_c_compiler_version9cuda_co_hd04c7a2c1a
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.0
            os: ubuntu
          - CONFIG: linux_aarch64_c_compiler_version10cuda_compiler_version11.2cxx_compiler_version10
            SHORT_CONFIG: linux_aarch64_c_compiler_version10c_h6023db96ca
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.2
            os: ubuntu
          - CONFIG: linux_aarch64_c_compiler_version12cuda_compiler_versionNonecxx_compiler_version12
            SHORT_CONFIG: linux_aarch64_c_compiler_version12c_h21a2ab6f58
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
            os: ubuntu
          - CONFIG: linux_ppc64le_c_compiler_version10cuda_compiler_version11.2cxx_compiler_version10
            SHORT_CONFIG: linux_ppc64le_c_compiler_version10c_h55046153ea
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cuda:11.2
            os: ubuntu
          - CONFIG: linux_ppc64le_c_compiler_version12cuda_compiler_versionNonecxx_compiler_version12
            SHORT_CONFIG: linux_ppc64le_c_compiler_version12c_h16240addde
            UPLOAD_PACKAGES: False
            DOCKER_IMAGE: quay.io/condaforge/linux-anvil-cos7-x86_64
            os: ubuntu
          - CONFIG: win_64_cuda_compiler_versionNone
            SHORT_CONFIG: win_64_cuda_compiler_versionNone
            UPLOAD_PACKAGES: False
            os: windows
          - CONFIG: osx_64_
            SHORT_CONFIG: osx_64_
            UPLOAD_PACKAGES: False
            os: macos
          - CONFIG: osx_arm64_
            SHORT_CONFIG: osx_arm64_
            UPLOAD_PACKAGES: False
            os: macos
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Build on Linux
      if: matrix.os == 'ubuntu'
      env:
        CONFIG: ${{ matrix.CONFIG }}
        UPLOAD_PACKAGES: ${{ matrix.UPLOAD_PACKAGES }}
        DOCKER_IMAGE: ${{ matrix.DOCKER_IMAGE }}
        CI: github_actions
        BINSTAR_TOKEN: ${{ secrets.BINSTAR_TOKEN }}
        FEEDSTOCK_TOKEN: ${{ secrets.FEEDSTOCK_TOKEN }}
        STAGING_BINSTAR_TOKEN: ${{ secrets.STAGING_BINSTAR_TOKEN }}
      shell: bash
      run: |
        echo "::group::Configure binfmt_misc"
        docker run --rm --privileged multiarch/qemu-user-static:register --reset --credential yes
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export GIT_BRANCH="$(basename $GITHUB_REF)"
        if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
          export IS_PR_BUILD="True"
        else
          export IS_PR_BUILD="False"
        fi
        echo "::endgroup::"
        ./.scripts/run_docker_build.sh

    - name: Build on macOS
      if: matrix.os == 'macos'
      env:
        CONFIG: ${{ matrix.CONFIG }}
        UPLOAD_PACKAGES: ${{ matrix.UPLOAD_PACKAGES }}
        CI: github_actions
        BINSTAR_TOKEN: ${{ secrets.BINSTAR_TOKEN }}
        FEEDSTOCK_TOKEN: ${{ secrets.FEEDSTOCK_TOKEN }}
        STAGING_BINSTAR_TOKEN: ${{ secrets.STAGING_BINSTAR_TOKEN }}
      shell: bash
      run: |
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export GIT_BRANCH="$(basename $GITHUB_REF)"
        if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
          export IS_PR_BUILD="True"
        else
          export IS_PR_BUILD="False"
        fi
        ./.scripts/run_osx_build.sh

    - name: Install Miniconda for windows
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-version: latest
        miniforge-variant: Mambaforge
      if: matrix.os == 'windows'
    - name: Build on windows
      shell: cmd
      run: |
        call activate base
        mamba.exe install -c conda-forge 'python=3.9' conda-build conda pip boa conda-forge-ci-setup=3
        if errorlevel 1 exit 1
        setup_conda_rc .\ ".\recipe" .\.ci_support\%CONFIG%.yaml
        if errorlevel 1 exit 1
        

        if EXIST LICENSE.txt (
          copy LICENSE.txt "recipe\\recipe-scripts-license.txt"
        )
        conda.exe mambabuild "recipe" -m .ci_support\%CONFIG%.yaml
        if errorlevel 1 exit 1
        set "FEEDSTOCK_NAME=%GITHUB_REPOSITORY:*/=%"
        set "GIT_BRANCH=%GITHUB_REF:refs/heads/=%"
        if /i "%GITHUB_EVENT_NAME%" == "pull_request" (
          set "IS_PR_BUILD=True"
        ) else (
          set "IS_PR_BUILD=False"
        )
        validate_recipe_outputs "%FEEDSTOCK_NAME%"
        if errorlevel 1 exit 1
        if /i "%UPLOAD_PACKAGES%" == "true" (
          if /i "%IS_PR_BUILD%" == "false" (
            upload_package --validate --feedstock-name="%FEEDSTOCK_NAME%" .\ ".\recipe" .ci_support\%CONFIG%.yaml
          )
        )
      env:
        PYTHONUNBUFFERED: 1
        CONFIG: ${{ matrix.CONFIG }}
        CI: github_actions
        UPLOAD_PACKAGES: ${{ matrix.UPLOAD_PACKAGES }}
        BINSTAR_TOKEN: ${{ secrets.BINSTAR_TOKEN }}
        FEEDSTOCK_TOKEN: ${{ secrets.FEEDSTOCK_TOKEN }}
        STAGING_BINSTAR_TOKEN: ${{ secrets.STAGING_BINSTAR_TOKEN }}
      if: matrix.os == 'windows'
    - name: Prepare conda build artifacts
      id: prepare-artifacts
      shell: bash
      if: ${{ always() }}
      env:
        CONFIG: ${{ matrix.CONFIG }}
        SHORT_CONFIG: ${{ matrix.SHORT_CONFIG }}
        OS: ${{ matrix.os }}
      run: |
        export CI=github_actions
        export CI_RUN_ID=$GITHUB_RUN_ID
        export FEEDSTOCK_NAME="$(basename $GITHUB_REPOSITORY)"
        export ARTIFACT_STAGING_DIR="$GITHUB_WORKSPACE"
        if [ $OS == "macos" ]; then
          export CONDA_BLD_DIR="${MINIFORGE_HOME:-${HOME}/miniforge3}/conda-bld"
        elif [ $OS == "windows" ]; then
          export CONDA_BLD_DIR="${CONDA//\\//}/conda-bld"
        else
          export CONDA_BLD_DIR="build_artifacts"
        fi
        # Archive everything in CONDA_BLD_DIR except environments
        # Archive the CONDA_BLD_DIR environments only when the job fails
        # Use different prefix for successful and failed build artifacts
        # so random failures don't prevent rebuilds from creating artifacts.
        JOB_STATUS="${{ job.status }}"
        if [ $JOB_STATUS == "failure" ]; then
          export BLD_ARTIFACT_PREFIX="conda_artifacts"
          export ENV_ARTIFACT_PREFIX="conda_envs"
        else
          export BLD_ARTIFACT_PREFIX="conda_pkgs"
        fi
        ./.scripts/create_conda_build_artifacts.sh
      continue-on-error: true

    - name: Store conda build artifacts
      uses: actions/upload-artifact@v3
      if: ${{ always() && steps.prepare-artifacts.outcome == 'success' }}
      with:
        name: ${{ steps.prepare-artifacts.outputs.BLD_ARTIFACT_NAME }}
        path: ${{ steps.prepare-artifacts.outputs.BLD_ARTIFACT_PATH }}
        retention-days: 14
      continue-on-error: true

    - name: Store conda build environment artifacts
      uses: actions/upload-artifact@v3
      if: ${{ failure() && steps.prepare-artifacts.outcome == 'success' }}
      with:
        name: ${{ steps.prepare-artifacts.outputs.ENV_ARTIFACT_NAME }}
        path: ${{ steps.prepare-artifacts.outputs.ENV_ARTIFACT_PATH }}
        retention-days: 14
      continue-on-error: true